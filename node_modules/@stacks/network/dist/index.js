"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StacksMocknet = exports.StacksTestnet = exports.StacksMainnet = void 0;
const common_1 = require("@stacks/common");
class StacksMainnet {
    constructor() {
        this.version = common_1.TransactionVersion.Mainnet;
        this.chainId = common_1.ChainID.Mainnet;
        this.coreApiUrl = 'https://stacks-node-api.mainnet.stacks.co';
        this.bnsLookupUrl = 'https://stacks-node-api.mainnet.stacks.co';
        this.broadcastEndpoint = '/v2/transactions';
        this.transferFeeEstimateEndpoint = '/v2/fees/transfer';
        this.accountEndpoint = '/v2/accounts';
        this.contractAbiEndpoint = '/v2/contracts/interface';
        this.readOnlyFunctionCallEndpoint = '/v2/contracts/call-read';
        this.isMainnet = () => this.version === common_1.TransactionVersion.Mainnet;
        this.getBroadcastApiUrl = () => `${this.coreApiUrl}${this.broadcastEndpoint}`;
        this.getTransferFeeEstimateApiUrl = () => `${this.coreApiUrl}${this.transferFeeEstimateEndpoint}`;
        this.getAccountApiUrl = (address) => `${this.coreApiUrl}${this.accountEndpoint}/${address}?proof=0`;
        this.getAbiApiUrl = (address, contract) => `${this.coreApiUrl}${this.contractAbiEndpoint}/${address}/${contract}`;
        this.getReadOnlyFunctionCallApiUrl = (contractAddress, contractName, functionName) => `${this.coreApiUrl}${this.readOnlyFunctionCallEndpoint}/${contractAddress}/${contractName}/${encodeURIComponent(functionName)}`;
        this.getInfoUrl = () => `${this.coreApiUrl}/v2/info`;
        this.getBlockTimeInfoUrl = () => `${this.coreApiUrl}/extended/v1/info/network_block_times`;
        this.getPoxInfoUrl = () => `${this.coreApiUrl}/v2/pox`;
        this.getStackerInfoUrl = (contractAddress, contractName) => `${this.coreApiUrl}${this.readOnlyFunctionCallEndpoint}
    ${contractAddress}/${contractName}/get-stacker-info`;
    }
    getNameInfo(fullyQualifiedName) {
        const nameLookupURL = `${this.bnsLookupUrl}/v1/names/${fullyQualifiedName}`;
        return common_1.fetchPrivate(nameLookupURL)
            .then(resp => {
            if (resp.status === 404) {
                throw new Error('Name not found');
            }
            else if (resp.status !== 200) {
                throw new Error(`Bad response status: ${resp.status}`);
            }
            else {
                return resp.json();
            }
        })
            .then(nameInfo => {
            if (nameInfo.address) {
                return Object.assign({}, nameInfo, { address: nameInfo.address });
            }
            else {
                return nameInfo;
            }
        });
    }
}
exports.StacksMainnet = StacksMainnet;
class StacksTestnet extends StacksMainnet {
    constructor() {
        super(...arguments);
        this.version = common_1.TransactionVersion.Testnet;
        this.chainId = common_1.ChainID.Testnet;
        this.coreApiUrl = 'https://stacks-node-api.testnet.stacks.co';
    }
}
exports.StacksTestnet = StacksTestnet;
class StacksMocknet extends StacksMainnet {
    constructor() {
        super(...arguments);
        this.version = common_1.TransactionVersion.Testnet;
        this.chainId = common_1.ChainID.Testnet;
        this.coreApiUrl = 'http://localhost:3999';
    }
}
exports.StacksMocknet = StacksMocknet;
//# sourceMappingURL=index.js.map